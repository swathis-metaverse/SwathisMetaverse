import{Vector2 as W,WebGLRenderer as ge,PerspectiveCamera as se,Scene as ye,PointLight as he,DirectionalLight as we,AmbientLight as ze,SplineCurve as Se,Vector3 as L,Color as G,OrthographicCamera as Pe,PlaneGeometry as Y,ShaderMaterial as ee,Mesh as le,HalfFloatType as Z,BufferGeometry as ce,BufferAttribute as te,AdditiveBlending as Ce,Points as Te,MathUtils as K,CanvasTexture as be,InstancedBufferAttribute as B,DoubleSide as oe,TextureLoader as ve,MeshBasicMaterial as ue,MeshPhongMaterial as de,MeshStandardMaterial as ie,InstancedMesh as re,Float32BufferAttribute as me,SphereGeometry as Me,OctahedronGeometry as De,ConeGeometry as Ne,CapsuleGeometry as Ie,BoxGeometry as _e,FogExp2 as Ee}from"three";import{OrbitControls as Ae}from"three/examples/jsm/controls/OrbitControls.js";import{GPUComputationRenderer as J}from"three/examples/jsm/misc/GPUComputationRenderer.js";import{EffectComposer as Re}from"three/examples/jsm/postprocessing/EffectComposer.js";import{RenderPass as ke}from"three/examples/jsm/postprocessing/RenderPass.js";import{UnrealBloomPass as Ve}from"three/examples/jsm/postprocessing/UnrealBloomPass.js";function Fe(l){const{domElement:e,onClick:t=()=>{},onEnter:n=()=>{},onMove:o=()=>{},onLeave:d=()=>{},onDragStart:y=()=>{},onDragMove:c=()=>{},onDragStop:s=()=>{}}=l,u=new W,r=new W,x=new W,w=new W,N=new W,v={position:u,nPosition:r,hover:!1,down:!1,removeListeners:M};return _(),v;function z(P){x.distanceTo(u)<20&&(V(P),t({position:u,nPosition:r}))}function R(P){v.hover=P.pointerType==="mouse",V(P),n({position:u,nPosition:r})}function k(P){v.down=!0,V(P),x.copy(u),w.copy(u),y({position:u,nPosition:r})}function C(P){V(P),N.copy(u).sub(w),v.down?c({position:u,nPosition:r,startPosition:x,lastPosition:w,delta:N}):v.hover||(v.hover=!0),o({position:u,nPosition:r,startPosition:x,lastPosition:w,delta:N}),w.copy(u)}function F(P){v.down=!1,s()}function U(P){v.down&&(v.down=!1,s()),v.hover=!1,d()}function V(P){const E=e.getBoundingClientRect();u.x=P.clientX-E.left,u.y=P.clientY-E.top,r.x=u.x/E.width*2-1,r.y=-(u.y/E.height)*2+1}function _(){e.addEventListener("click",z),e.addEventListener("pointerenter",R),e.addEventListener("pointerdown",k),e.addEventListener("pointermove",C),e.addEventListener("pointerup",F),e.addEventListener("pointerleave",U)}function M(){e.removeEventListener("click",z),e.removeEventListener("pointerenter",R),e.removeEventListener("pointerdown",k),e.removeEventListener("pointermove",C),e.removeEventListener("pointerup",F),e.removeEventListener("pointerleave",U)}}function H(l){const e={el:null,canvas:null,eventsEl:null,width:null,height:null,resize:!0,alpha:!1,antialias:!1,orbitControls:!1,init(){},initCamera(){},initScene(){},afterResize(){},beforeRender(){},...l},t={renderer:null,camera:null,scene:null,pointer:null,width:0,height:0,wWidth:0,wHeight:0,clock:{startTime:0,time:0,elapsed:0},options:e};let n,o;return d(),t;function d(){var r,x,w,N,v;let z;if(e.el)z=document.createElement("canvas"),e.el.appendChild(z);else if(e.canvas)z=e.canvas;else throw new Error("Missing parameter : el or canvas is required");(r=e.init)==null||r.call(e,t),t.renderer=new ge({canvas:z,alpha:e.alpha,antialias:e.antialias}),(x=e.initRenderer)==null||x.call(e,t),t.camera=new se,t.camera.position.z=50,(w=e.initCamera)==null||w.call(e,t),e.orbitControls&&(o=new Ae(t.camera,(N=e.eventsEl)!=null?N:t.renderer.domElement),o.enableDamping=!0,o.dampingFactor=.1,typeof e.orbitControls=="object"&&Object.keys(e.orbitControls).forEach(R=>{o[R]=e.orbitControls[R]})),s(),e.resize&&!e.width&&!e.height&&window.addEventListener("resize",s),t.scene=new ye,(v=e.initScene)==null||v.call(e,t),y(),n=e.render?e.render:()=>{t.renderer.render(t.scene,t.camera)},requestAnimationFrame(R=>{t.clock.startTime=t.clock.time=R,requestAnimationFrame(c)})}function y(){var r,x;const w={};e.onPointerEnter&&(w.onEnter=e.onPointerEnter),e.onPointerMove&&(w.onMove=e.onPointerMove),e.onPointerMove&&(w.onLeave=e.onPointerLeave),Object.keys(w).length>0&&(t.pointer=Fe({domElement:(x=e.eventsEl)!=null?x:(r=e.el)!=null?r:e.canvas,...w}))}function c(r){const{clock:x}=t;x.elapsed=r-x.time,x.time=r,e.beforeRender(t),o&&o.update(),n(t),requestAnimationFrame(c)}function s(){var r;if(e.width&&e.height)t.width=e.width,t.height=e.height;else if(e.resize==="window")t.width=window.innerWidth,t.height=window.innerHeight;else{const x=t.renderer.domElement.parentElement;t.width=x.clientWidth,t.height=x.clientHeight}if(t.renderer.setSize(t.width,t.height),t.camera.aspect=t.width/t.height,t.camera.updateProjectionMatrix(),t.camera instanceof se){const x=u();t.wWidth=x[0],t.wHeight=x[1]}else t.wWidth=t.camera.top-t.camera.bottom,t.wHeight=t.camera.right-t.camera.left;(r=e.afterResize)==null||r.call(e,t)}function u(){const r=t.camera.fov*Math.PI/180,x=2*Math.tan(r/2)*Math.abs(t.camera.position.z);return[x*t.camera.aspect,x]}}function ae(l){const e={};return["el","canvas","eventsEl","width","height","resize","orbitControls"].forEach(t=>{l[t]!==void 0&&(e[t]=l[t])}),e}function ne(l,e){const t=[];if(Array.isArray(e)&&e.length>0){let n;e.forEach(o=>{switch(o.type){case"ambient":n=new ze(...o.params);break;case"directional":n=new we(...o.params);break;case"point":n=new he(...o.params);break;default:console.error(`Unknown light type ${o.type}`)}n&&(typeof o.props=="object"&&Object.keys(o.props).forEach(d=>{d==="position"?n.position.set(...o.props[d]):n[d]=o.props[d]}),l.add(n),t.push(n))})}return t}const Ue={shaderPoints:8,curvePoints:80,curveLerp:.75,radius1:3,radius2:5,velocityTreshold:10,sleepRadiusX:150,sleepRadiusY:150,sleepTimeCoefX:.0025,sleepTimeCoefY:.0025};function We(l){const e={...Ue,...l},t=new Array(e.curvePoints).fill(0).map(()=>new W),n=new Se(t),o=new L,d=new L,y={value:new W},c={value:new W},s={value:new Array(e.shaderPoints).fill(0).map(()=>new W)},u={value:new G(16711935)};let r,x,w=!1;const N={};return["el","canvas","width","height","resize"].forEach(v=>{l[v]!==void 0&&(N[v]=l[v])}),H({...N,antialias:!1,initCamera(v){v.camera=new Pe},initScene({scene:v}){const z=new Y(2,2);r=new ee({uniforms:{uRatio:y,uSize:c,uPoints:s,uColor:u},defines:{SHADER_POINTS:e.shaderPoints},vertexShader:`
          varying vec2 vUv;
          void main() {
            vUv = uv;
            gl_Position = vec4(position, 1.0);
          }
        `,fragmentShader:`
          // https://www.shadertoy.com/view/wdy3DD
          // https://www.shadertoy.com/view/MlKcDD
          // Signed distance to a quadratic bezier
          float sdBezier(vec2 pos, vec2 A, vec2 B, vec2 C) {
            vec2 a = B - A;
            vec2 b = A - 2.0*B + C;
            vec2 c = a * 2.0;
            vec2 d = A - pos;
            float kk = 1.0 / dot(b,b);
            float kx = kk * dot(a,b);
            float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;
            float kz = kk * dot(d,a);
            float res = 0.0;
            float p = ky - kx*kx;
            float p3 = p*p*p;
            float q = kx*(2.0*kx*kx - 3.0*ky) + kz;
            float h = q*q + 4.0*p3;
            if(h >= 0.0){
              h = sqrt(h);
              vec2 x = (vec2(h, -h) - q) / 2.0;
              vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));
              float t = uv.x + uv.y - kx;
              t = clamp( t, 0.0, 1.0 );
              // 1 root
              vec2 qos = d + (c + b*t)*t;
              res = length(qos);
            } else {
              float z = sqrt(-p);
              float v = acos( q/(p*z*2.0) ) / 3.0;
              float m = cos(v);
              float n = sin(v)*1.732050808;
              vec3 t = vec3(m + m, -n - m, n - m) * z - kx;
              t = clamp( t, 0.0, 1.0 );
              // 3 roots
              vec2 qos = d + (c + b*t.x)*t.x;
              float dis = dot(qos,qos);
              res = dis;
              qos = d + (c + b*t.y)*t.y;
              dis = dot(qos,qos);
              res = min(res,dis);
              qos = d + (c + b*t.z)*t.z;
              dis = dot(qos,qos);
              res = min(res,dis);
              res = sqrt( res );
            }
            return res;
          }

          uniform vec2 uRatio;
          uniform vec2 uSize;
          uniform vec2 uPoints[SHADER_POINTS];
          uniform vec3 uColor;
          varying vec2 vUv;
          void main() {
            float intensity = 1.0;
            float radius = 0.015;

            vec2 pos = (vUv - 0.5) * uRatio;

            vec2 c = (uPoints[0] + uPoints[1]) / 2.0;
            vec2 c_prev;
            float dist = 10000.0;
            for(int i = 0; i < SHADER_POINTS - 1; i++){
              c_prev = c;
              c = (uPoints[i] + uPoints[i + 1]) / 2.0;
              dist = min(dist, sdBezier(pos, c_prev, uPoints[i], c));
            }
            dist = max(0.0, dist);

            float glow = pow(uSize.y / dist, intensity);
            vec3 col = vec3(0.0);
            col += 10.0 * vec3(smoothstep(uSize.x, 0.0, dist));
            col += glow * uColor;

            // Tone mapping
            col = 1.0 - exp(-col);
            col = pow(col, vec3(0.4545));
  
            gl_FragColor = vec4(col, 1.0);
          }
        `}),x=new le(z,r),v.add(x)},afterResize({width:v,height:z}){c.value.set(e.radius1,e.radius2),v>=z?(y.value.set(1,z/v),c.value.multiplyScalar(1/v)):(y.value.set(v/z,1),c.value.multiplyScalar(1/z))},beforeRender({clock:v,width:z,height:R,wWidth:k}){for(let C=1;C<e.curvePoints;C++)t[C].lerp(t[C-1],e.curveLerp);for(let C=0;C<e.shaderPoints;C++)n.getPoint(C/(e.shaderPoints-1),s.value[C]);if(w)u.value.r=o.z,u.value.g=0,u.value.b=1-o.z,o.multiplyScalar(.95);else{const C=v.time*e.sleepTimeCoefX,F=v.time*e.sleepTimeCoefY,U=Math.cos(C),V=Math.sin(F),_=e.sleepRadiusX*k/z,M=e.sleepRadiusY*k/z,P=_*U,E=M*V;n.points[0].set(P,E),u.value.r=.5+.5*Math.cos(v.time*.0015),u.value.g=0,u.value.b=1-u.value.r}},onPointerMove({nPosition:v,delta:z}){w=!0;const R=.5*v.x*y.value.x,k=.5*v.y*y.value.y;n.points[0].set(R,k),d.x=Math.min(o.x+Math.abs(z.x)/e.velocityTreshold,1),d.y=Math.min(o.y+Math.abs(z.y)/e.velocityTreshold,1),d.z=Math.sqrt(d.x*d.x+d.y*d.y),o.lerp(d,.05)},onPointerLeave(){w=!1}}),{config:e}}function $(l){let e=[];n(l);const t=new G;return{setColors:n,getColorAt:o};function n(d){e=[],d.forEach(y=>{e.push(new G(y))})}function o(d){const y=Math.max(0,Math.min(1,d))*(l.length-1),c=Math.floor(y),s=e[c];if(c===l.length-1)return s.getHex();const u=y-c,r=e[c+1];return t.r=s.r+u*(r.r-s.r),t.g=s.g+u*(r.g-s.g),t.b=s.b+u*(r.b-s.b),t.clone()}}var O=`vec4 permute(vec4 x){vec4 xm=mod(x,289.0);return mod(((xm*34.0)+10.0)*xm,289.0);}float psrdnoise(vec3 x,vec3 period,float alpha,out vec3 gradient){
#ifndef PERLINGRID
const mat3 M=mat3(0.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,0.0);const mat3 Mi=mat3(-0.5,0.5,0.5,0.5,-0.5,0.5,0.5,0.5,-0.5);
#endif
vec3 uvw;
#ifndef PERLINGRID
uvw=M*x;
#else
uvw=x+dot(x,vec3(1.0/3.0));
#endif
vec3 i0=floor(uvw);vec3 f0=fract(uvw);vec3 g_=step(f0.xyx,f0.yzz);vec3 l_=1.0-g_;vec3 g=vec3(l_.z,g_.xy);vec3 l=vec3(l_.xy,g_.z);vec3 o1=min(g,l);vec3 o2=max(g,l);vec3 i1=i0+o1;vec3 i2=i0+o2;vec3 i3=i0+vec3(1.0);vec3 v0,v1,v2,v3;
#ifndef PERLINGRID
v0=Mi*i0;v1=Mi*i1;v2=Mi*i2;v3=Mi*i3;
#else
v0=i0-dot(i0,vec3(1.0/6.0));v1=i1-dot(i1,vec3(1.0/6.0));v2=i2-dot(i2,vec3(1.0/6.0));v3=i3-dot(i3,vec3(1.0/6.0));
#endif
vec3 x0=x-v0;vec3 x1=x-v1;vec3 x2=x-v2;vec3 x3=x-v3;if(any(greaterThan(period,vec3(0.0)))){vec4 vx=vec4(v0.x,v1.x,v2.x,v3.x);vec4 vy=vec4(v0.y,v1.y,v2.y,v3.y);vec4 vz=vec4(v0.z,v1.z,v2.z,v3.z);if(period.x>0.0)vx=mod(vx,period.x);if(period.y>0.0)vy=mod(vy,period.y);if(period.z>0.0)vz=mod(vz,period.z);
#ifndef PERLINGRID
i0=M*vec3(vx.x,vy.x,vz.x);i1=M*vec3(vx.y,vy.y,vz.y);i2=M*vec3(vx.z,vy.z,vz.z);i3=M*vec3(vx.w,vy.w,vz.w);
#else
v0=vec3(vx.x,vy.x,vz.x);v1=vec3(vx.y,vy.y,vz.y);v2=vec3(vx.z,vy.z,vz.z);v3=vec3(vx.w,vy.w,vz.w);i0=v0+dot(v0,vec3(1.0/3.0));i1=v1+dot(v1,vec3(1.0/3.0));i2=v2+dot(v2,vec3(1.0/3.0));i3=v3+dot(v3,vec3(1.0/3.0));
#endif
i0=floor(i0+0.5);i1=floor(i1+0.5);i2=floor(i2+0.5);i3=floor(i3+0.5);}vec4 hash=permute(permute(permute(vec4(i0.z,i1.z,i2.z,i3.z))+vec4(i0.y,i1.y,i2.y,i3.y))+vec4(i0.x,i1.x,i2.x,i3.x));vec4 theta=hash*3.883222077;vec4 sz=hash*-0.006920415+0.996539792;vec4 psi=hash*0.108705628;vec4 Ct=cos(theta);vec4 St=sin(theta);vec4 sz_prime=sqrt(1.0-sz*sz);vec4 gx,gy,gz;
#ifdef FASTROTATION
vec4 qx=St;vec4 qy=-Ct;vec4 qz=vec4(0.0);vec4 px=sz*qy;vec4 py=-sz*qx;vec4 pz=sz_prime;psi+=alpha;vec4 Sa=sin(psi);vec4 Ca=cos(psi);gx=Ca*px+Sa*qx;gy=Ca*py+Sa*qy;gz=Ca*pz+Sa*qz;
#else
if(alpha!=0.0){vec4 Sp=sin(psi);vec4 Cp=cos(psi);vec4 px=Ct*sz_prime;vec4 py=St*sz_prime;vec4 pz=sz;vec4 Ctp=St*Sp-Ct*Cp;vec4 qx=mix(Ctp*St,Sp,sz);vec4 qy=mix(-Ctp*Ct,Cp,sz);vec4 qz=-(py*Cp+px*Sp);vec4 Sa=vec4(sin(alpha));vec4 Ca=vec4(cos(alpha));gx=Ca*px+Sa*qx;gy=Ca*py+Sa*qy;gz=Ca*pz+Sa*qz;}else{gx=Ct*sz_prime;gy=St*sz_prime;gz=sz;}
#endif
vec3 g0=vec3(gx.x,gy.x,gz.x);vec3 g1=vec3(gx.y,gy.y,gz.y);vec3 g2=vec3(gx.z,gy.z,gz.z);vec3 g3=vec3(gx.w,gy.w,gz.w);vec4 w=0.5-vec4(dot(x0,x0),dot(x1,x1),dot(x2,x2),dot(x3,x3));w=max(w,0.0);vec4 w2=w*w;vec4 w3=w2*w;vec4 gdotx=vec4(dot(g0,x0),dot(g1,x1),dot(g2,x2),dot(g3,x3));float n=dot(w3,gdotx);vec4 dw=-6.0*w2*gdotx;vec3 dn0=w3.x*g0+dw.x*x0;vec3 dn1=w3.y*g1+dw.y*x1;vec3 dn2=w3.z*g2+dw.z*x2;vec3 dn3=w3.w*g3+dw.w*x3;gradient=39.5*(dn0+dn1+dn2+dn3);return 39.5*n;}`;const{randFloat:xe,randFloatSpread:fe}=K,Le={gpgpuSize:256,colors:[65280,255],color:16711680,coordScale:1.5,noiseIntensity:.001,noiseTimeCoef:1e-4,pointSize:5,pointDecay:.005,sleepRadiusX:250,sleepRadiusY:250,sleepTimeCoefX:.001,sleepTimeCoefY:.002};function Ge(l){const e={...Le,...l},t=e.gpgpuSize,n=t*t;let o,d,y,c,s;const u={value:0},r={value:e.coordScale},x={value:e.noiseIntensity},w={value:e.pointSize},N={value:e.pointDecay},v={value:new G(e.color)},z={value:new W},R={value:new W},k={uTime:u,uCoordScale:r,uNoiseIntensity:x,uPointSize:w,uPointDecay:N,uColor:v,uMouse:z,uMouseDirection:R};let C,F,U,V=!1;const _=new W;return H({...Oe(l),antialias:!1,initRenderer({renderer:S}){M(S)},initScene({scene:S}){P(),S.add(U)},beforeRender({width:S,wWidth:b,wHeight:D,clock:I,pointer:A}){if(V)_.x=A.nPosition.x*.5*b,_.y=A.nPosition.y*.5*D;else{const i=I.time*e.sleepTimeCoefX,h=I.time*e.sleepTimeCoefY,f=Math.cos(i),p=Math.sin(h),m=e.sleepRadiusX*b/S,g=e.sleepRadiusY*b/S;_.x=m*f,_.y=g*p}z.value.lerp(_,.05),u.value=I.time*e.noiseTimeCoef,o.compute(),F.uniforms.texturePosition.value=o.getCurrentRenderTarget(s).texture,F.uniforms.textureVelocity.value=o.getCurrentRenderTarget(c).texture},onPointerMove({delta:S}){V=!0,R.value.copy(S)},onPointerLeave(){V=!1}}),{config:e,uniforms:k};function M(S){o=new J(t,t,S),S.capabilities.isWebGL2||o.setDataType(Z),d=o.createTexture(),y=o.createTexture(),E(d,y),c=o.addVariable("textureVelocity",`
      ${O}
      uniform float uTime;
      uniform float uCoordScale;
      uniform float uNoiseIntensity;
      void main() {
        vec2 uv = gl_FragCoord.xy / resolution.xy;
        vec4 pos = texture2D(texturePosition, uv);
        vec4 vel = texture2D(textureVelocity, uv);

        if (pos.w < 0.0) {
          vel.x = 0.0;
          vel.y = 0.0;
          vel.z = 0.0;
        } else {
          vec3 grad;
          vec3 p = vec3(0.0);
          float n = psrdnoise(pos.xyz * uCoordScale, p, uTime, grad);
          vel.xyz += grad * uNoiseIntensity * pos.w;
        }
        gl_FragColor = vel;
      }
    `,y),s=o.addVariable("texturePosition",`
      uniform float uPointDecay;
      uniform vec2 uMouse;
      uniform vec2 uMouseDirection;
      void main() {
        vec2 uv = gl_FragCoord.xy / resolution.xy;
        vec4 pos = texture2D(texturePosition, uv);
        vec4 vel = texture2D(textureVelocity, uv);
        if (pos.w < 0.0) { pos.w = vel.w; }
        pos.w -= uPointDecay;
        if (pos.w <= 0.0) {
          pos.xy = uMouse.xy;
          pos.z = 0.0;
        } else {
          pos.xyz += vel.xyz;
        }
        gl_FragColor = pos;
      }
    `,d),o.setVariableDependencies(c,[s,c]),o.setVariableDependencies(s,[s,c]),Object.keys(k).forEach(D=>{c.material.uniforms[D]=k[D],s.material.uniforms[D]=k[D]});const b=o.init();b!==null&&console.error(b)}function P(){C=new ce;const S=new Float32Array(n*3),b=new Float32Array(n*2),D=new Float32Array(n*3);for(let i=0;i<n*3;i+=3)S[i]=0,S[i+1]=0,S[i+2]=0;let I=0;for(let i=0;i<t;i++)for(let h=0;h<t;h++)b[I++]=h/(t-1),b[I++]=i/(t-1);const A=$(e.colors);for(let i=0;i<n*3;i+=3){const h=A.getColorAt(Math.random());D[i]=h.r,D[i+1]=h.g,D[i+2]=h.b}C.setAttribute("position",new te(S,3)),C.setAttribute("uv",new te(b,2)),C.setAttribute("color",new te(D,3)),F=new ee({blending:Ce,depthTest:!1,transparent:!0,vertexColors:!0,uniforms:{texturePosition:{value:null},textureVelocity:{value:null},uPointSize:w,uColor:v},vertexShader:`
        uniform sampler2D texturePosition;
        uniform sampler2D textureVelocity;
        uniform float uPointSize;
        varying vec4 vPos;
        varying vec4 vVel;
        varying vec3 vCol;
        void main() {
          vCol = color;
          vPos = texture2D(texturePosition, uv);
          vVel = texture2D(textureVelocity, uv);
          vec4 mvPosition = modelViewMatrix * vec4(vPos.xyz, 1.0);
          // gl_PointSize = smoothstep(0.0, 2.0, vPos.w) * uPointSize;
          gl_PointSize = vPos.w * (vVel.w + 0.5) * uPointSize;
          gl_Position = projectionMatrix * mvPosition;
        }
      `,fragmentShader:`
        uniform vec3 uColor;
        varying vec4 vPos;
        varying vec4 vVel;
        varying vec3 vCol;
        void main() {
          float dist = length(gl_PointCoord - 0.5);
          if (dist > 0.5) discard;
          // float a = smoothstep(0.0, 1.0, vPos.w);
          gl_FragColor = vec4(mix(vCol, uColor, vPos.w), vPos.w);
        }
      `}),U=new Te(C,F),U.matrixAutoUpdate=!1,U.updateMatrix()}function E(S,b){const D=S.image.data,I=b.image.data;for(let A=0,i=D.length;A<i;A+=4)D[A+0]=fe(1),D[A+1]=fe(1),D[A+2]=-1e5,D[A+3]=xe(.1,1),I[A+0]=0,I[A+1]=0,I[A+2]=0,I[A+3]=xe(.1,1)}}function Oe(l){const e={};return["el","canvas","width","height","resize"].forEach(t=>{l[t]!==void 0&&(e[t]=l[t])}),e}const qe={width:256,height:256};function He(l){const e={...qe,...l},t=document.createElement("canvas");t.width=e.width,t.height=e.height;const n=t.getContext("2d"),o=new be(n.canvas);return{canvas:t,ctx:n,texture:o}}var je="float psrdnoise(vec2 x,vec2 period,float alpha,out vec2 gradient){vec2 uv=vec2(x.x+x.y*0.5,x.y);vec2 i0=floor(uv);vec2 f0=fract(uv);float cmp=step(f0.y,f0.x);vec2 o1=vec2(cmp,1.0-cmp);vec2 i1=i0+o1;vec2 i2=i0+vec2(1.0,1.0);vec2 v0=vec2(i0.x-i0.y*0.5,i0.y);vec2 v1=vec2(v0.x+o1.x-o1.y*0.5,v0.y+o1.y);vec2 v2=vec2(v0.x+0.5,v0.y+1.0);vec2 x0=x-v0;vec2 x1=x-v1;vec2 x2=x-v2;vec3 iu,iv;vec3 xw,yw;if(any(greaterThan(period,vec2(0.0)))){xw=vec3(v0.x,v1.x,v2.x);yw=vec3(v0.y,v1.y,v2.y);if(period.x>0.0)xw=mod(vec3(v0.x,v1.x,v2.x),period.x);if(period.y>0.0)yw=mod(vec3(v0.y,v1.y,v2.y),period.y);iu=floor(xw+0.5*yw+0.5);iv=floor(yw+0.5);}else{iu=vec3(i0.x,i1.x,i2.x);iv=vec3(i0.y,i1.y,i2.y);}vec3 hash=mod(iu,289.0);hash=mod((hash*51.0+2.0)*hash+iv,289.0);hash=mod((hash*34.0+10.0)*hash,289.0);vec3 psi=hash*0.07482+alpha;vec3 gx=cos(psi);vec3 gy=sin(psi);vec2 g0=vec2(gx.x,gy.x);vec2 g1=vec2(gx.y,gy.y);vec2 g2=vec2(gx.z,gy.z);vec3 w=0.8-vec3(dot(x0,x0),dot(x1,x1),dot(x2,x2));w=max(w,0.0);vec3 w2=w*w;vec3 w4=w2*w2;vec3 gdotx=vec3(dot(g0,x0),dot(g1,x1),dot(g2,x2));float n=dot(w4,gdotx);vec3 w3=w2*w;vec3 dw=-8.0*w3*gdotx;vec2 dn0=w4.x*g0+dw.x*x0;vec2 dn1=w4.y*g1+dw.y*x1;vec2 dn2=w4.z*g2+dw.z*x2;gradient=10.9*(dn0+dn1+dn2);return 10.9*n;}";const Xe={colors:[16777215,0],minStroke:5,maxStroke:5,timeCoef:5e-4,coordScale:2,displacementScale:.002,mouseScale:.25,mouseLerp:.025};function Be(l){const e={...Xe,...l},t=He({width:1,height:4096});u();const n={uMap:{value:t.texture},uTime:{value:0},uCoordScale:{value:e.coordScale},uDisplacementScale:{value:e.displacementScale},uMouse:{value:new W}},o=new Y,d=new ee({uniforms:n,vertexShader:`
      varying vec2 vUv;
      void main() {
        vUv = uv;
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
      }
    `,fragmentShader:`
      uniform sampler2D uMap;
      uniform float uTime;
      uniform float uCoordScale;
      uniform float uDisplacementScale;
      uniform vec2 uMouse;
      varying vec2 vUv;
      ${je}
      void main() {
        vec2 p = vec2(0.0);
        vec2 grad;
        float n = psrdnoise(vUv * uCoordScale + uMouse, p, uTime, grad);
        // grad *= uCoordScale;
        vec2 uv = vUv + uDisplacementScale * grad;
        gl_FragColor = texture2D(uMap, uv.yx);
      }
    `}),y=new le(o,d),c=new W,s={};return["el","canvas","width","height","resize"].forEach(r=>{l[r]!==void 0&&(s[r]=l[r])}),H({...s,antialias:!0,initScene({camera:r,scene:x,wWidth:w,wHeight:N}){y.scale.set(w*2,N*2,1),x.add(y),r.position.set(0,-30,7),r.lookAt(0,-19,0)},beforeRender({clock:r}){n.uTime.value=r.time*e.timeCoef,n.uMouse.value.lerp(c,e.mouseLerp)},onPointerMove({nPosition:r}){c.set(-r.x,r.y).multiplyScalar(e.mouseScale)},onPointerLeave(){c.set(0,0)}}),{config:e,uniforms:n,drawTexture:u};function u(){const r=t.ctx;r.lineWidth=0;const{width:x,height:w}=t.canvas,N=$(e.colors);let v=0,z;for(;v<w;)z=e.minStroke+Math.random()*(e.maxStroke-e.minStroke),r.fillStyle=N.getColorAt(Math.random()).getStyle(),r.beginPath(),r.rect(0,v-1,x,z+1),r.fill(),r.closePath(),v+=z;t.texture.needsUpdate=!0}}const{randFloat:$e,randFloatSpread:j}=K,Ye={gpgpuSize:64,background:16777215,material:"basic",materialParams:{},texture:null,textureCount:1,colors:[16777215,16777215],lights:[{type:"ambient",params:[16777215,.5]},{type:"directional",params:[16777215,1],props:{position:[0,10,0]}}],wingsScale:[1,1,1],wingsWidthSegments:8,wingsHeightSegments:8,wingsSpeed:.75,wingsDisplacementScale:1.25,noiseCoordScale:.01,noiseTimeCoef:5e-4,noiseIntensity:.0025,attractionRadius1:100,attractionRadius2:150,maxVelocity:.1};function Ze(l){const e={...Ye,...l};if(!["basic","phong","standard"].includes(e.material))throw new Error(`Invalid material ${e.material}`);if(!Number.isInteger(e.wingsWidthSegments)||e.wingsWidthSegments%2!==0)throw new Error(`Invalid wingsWidthSegments ${e.wingsWidthSegments}`);const t=e.gpgpuSize,n=t*t;let o,d,y,c,s;const u={value:null},r={value:null},x={value:null},w={value:0},N={value:e.noiseCoordScale},v={value:e.noiseIntensity},z={value:e.maxVelocity},R={value:e.attractionRadius1},k={value:e.attractionRadius2},C={value:new L(...e.wingsScale)},F={value:e.wingsSpeed},U={value:e.wingsDisplacementScale},V={uTexturePosition:u,uOldTexturePosition:r,uTextureVelocity:x},_={uTime:w,uNoiseCoordScale:N,uNoiseIntensity:v,uMaxVelocity:z,uAttractionRadius1:R,uAttractionRadius2:k,uWingsScale:C,uWingsSpeed:F,uWingsDisplacementScale:U},M={...V,..._};let P,E,S;return{three:H({...ae(l),antialias:!0,orbitControls:!0,initRenderer({renderer:i}){b(i)},initCamera({camera:i}){i.position.set(0,50,70)},initScene({scene:i}){D(i)},beforeRender({clock:i}){w.value=i.time*e.noiseTimeCoef,o.compute(),u.value=s.renderTargets[o.currentTextureIndex].texture,r.value=s.renderTargets[o.currentTextureIndex===0?1:0].texture,x.value=c.renderTargets[o.currentTextureIndex].texture}}),config:e,uniforms:M,setColors:I};function b(i){o=new J(t,t,i),i.capabilities.isWebGL2||o.setDataType(Z),d=o.createTexture(),y=o.createTexture(),A(d,y),c=o.addVariable("textureVelocity",`
      ${O}
      uniform float uTime;
      uniform float uNoiseCoordScale;
      uniform float uNoiseIntensity;
      uniform float uMaxVelocity;
      uniform float uAttractionRadius1;
      uniform float uAttractionRadius2;
      uniform float uWingsSpeed;
      void main() {
        vec2 uv = gl_FragCoord.xy / resolution.xy;
        vec4 pos = texture2D(texturePosition, uv);
        vec4 vel = texture2D(textureVelocity, uv);

        vec3 grad;
        float n = psrdnoise(pos.xyz * uNoiseCoordScale, vec3(0), uTime, grad);
        grad = grad * uNoiseIntensity;
        vel.xyz = vel.xyz + (pos.w * 0.75) * grad;

        vec3 dv = -pos.xyz;
        float coef = smoothstep(uAttractionRadius1, uAttractionRadius2, length(dv));
        vel.xyz = vel.xyz + pos.w * coef * normalize(dv);
        vel.xyz = clamp(vel.xyz, -uMaxVelocity, uMaxVelocity);

        vel.w = mod(vel.w + length(vel.xyz) * (0.5 + pos.w) * uWingsSpeed, 6.2831853071);
        gl_FragColor = vel;
      }
    `,y),s=o.addVariable("texturePosition",`
      ${O}
      uniform float uTime;
      void main() {
        vec2 uv = gl_FragCoord.xy / resolution.xy;
        vec4 pos = texture2D(texturePosition, uv);
        vec4 vel = texture2D(textureVelocity, uv);
        pos.xyz += vel.xyz;
        gl_FragColor = pos;
      }
    `,d),o.setVariableDependencies(c,[s,c]),o.setVariableDependencies(s,[s,c]),Object.keys(_).forEach(f=>{c.material.uniforms[f]=M[f],s.material.uniforms[f]=M[f]});const h=o.init();if(h!==null)throw new Error(h)}function D(i){e.background!==void 0&&(i.background=new G(e.background)),ne(i,e.lights),P=new Y(2,2,e.wingsWidthSegments,e.wingsHeightSegments).rotateX(Math.PI/2);const h=new Float32Array(n*2),f=new Float32Array(n);let p=0,m=0;for(let a=0;a<t;a++)for(let T=0;T<t;T++)h[p++]=T/(t-1),h[p++]=a/(t-1),f[m++]=Math.floor(Math.random()*e.textureCount);P.setAttribute("gpuUv",new B(h,2)),P.setAttribute("mapIndex",new B(f,1));const g={side:oe,...e.materialParams};switch(e.texture&&(g.map=new ve().load(e.texture)),g.onBeforeCompile=a=>{a.defines={COMPUTE_NORMALS:e.material!=="basic",WINGS_WIDTH_SEGMENTS:e.wingsWidthSegments,WINGS_HEIGHT_SEGMENTS:e.wingsHeightSegments,WINGS_DX:(2/e.wingsWidthSegments).toFixed(10),WINGS_DZ:(2/e.wingsHeightSegments).toFixed(10),TEXTURE_COUNT:e.textureCount.toFixed(10)},Object.keys(M).forEach(T=>{a.uniforms[T]=M[T]}),a.vertexShader=`
        uniform sampler2D uTexturePosition;
        uniform sampler2D uOldTexturePosition;
        uniform sampler2D uTextureVelocity;
        uniform vec3 uWingsScale;
        uniform float uWingsDisplacementScale;
        attribute vec2 gpuUv;
        attribute float mapIndex;
        varying vec4 vPos;
        varying vec4 vVel;
        varying float vMapIndex;

        mat3 lookAt(vec3 origin, vec3 target, vec3 up) {
          vec3 z = target - origin;
          if (z.x * z.x + z.y * z.y + z.z * z.z == 0.0) { z.z = 1.0; }
          z = normalize(z);
          vec3 x = cross(up, z);
          if (x.x * x.x + x.y * x.y + x.z * x.z == 0.0) {
            if (abs(up.z) == 1.0) { z.x += 0.0001; }
            else { z.z += 0.0001; }
            x = cross(up, z);
          }
          x = normalize(x);
          vec3 y = cross(z, x);
          return mat3(x, y, z);
        }

        mat4 iMatrix(vec3 pos, mat3 rmat, vec3 scale) {
          return mat4(
            rmat[0][0] * scale.x, rmat[0][1] * scale.x, rmat[0][2] * scale.x, 0.0,
            rmat[1][0] * scale.y, rmat[1][1] * scale.y, rmat[1][2] * scale.y, 0.0,
            rmat[2][0] * scale.z, rmat[2][1] * scale.z, rmat[2][2] * scale.z, 0.0,
            pos.x, pos.y, pos.z, 1.0
          );
        }
      `+a.vertexShader,a.vertexShader=a.vertexShader.replace("#include <defaultnormal_vertex>",""),a.vertexShader=a.vertexShader.replace("#include <normal_vertex>",""),a.vertexShader=a.vertexShader.replace("#include <begin_vertex>",`
        vPos = texture2D(uTexturePosition, gpuUv);
        vec4 oldPos = texture2D(uOldTexturePosition, gpuUv);
        vVel = texture2D(uTextureVelocity, gpuUv);
        vMapIndex = float(mapIndex);

        mat3 rmat = lookAt(oldPos.xyz, vPos.xyz, vec3(0, 1, 0));
        mat4 im = iMatrix(vPos.xyz, rmat, (0.5 + vPos.w) * uWingsScale);

        vec3 transformed = vec3(position);

        #ifdef COMPUTE_NORMALS
          vec3 transformedNormal = objectNormal; 
        #endif

        float dx = abs(transformed.x);
        if (dx > 0.0) {
          float sdx = smoothstep(0.0, 1.0 + WINGS_DX, dx);
          #if WINGS_HEIGHT_SEGMENTS > 1
            float dz = transformed.z + 1.0;
            float sdz = smoothstep(0.0, 2.0 + WINGS_DZ, dz);
            transformed.y = sin(vVel.w - sdx + sdz) * sdx * uWingsDisplacementScale;
          #else
            transformed.y = sin(vVel.w - sdx) * sdx * uWingsDisplacementScale;
          #endif

          #ifdef COMPUTE_NORMALS
            #if WINGS_HEIGHT_SEGMENTS > 1
              float s = sign(transformed.x);
              float sdx1 = smoothstep(0.0, 1.0 + WINGS_DX, dx + WINGS_DX);
              float sdz1 = smoothstep(0.0, 2.0 + WINGS_DZ, dz + WINGS_DZ);
              float dvy1 = sin(vVel.w - sdx + sdz1) * sdx * uWingsDisplacementScale - transformed.y;
              float dvy2 = sin(vVel.w - sdx1 + sdz) * sdx1 * uWingsDisplacementScale - transformed.y;
              vec3 v1 = vec3(0.0, dvy1, s * WINGS_DZ);
              vec3 v2 = vec3(s * WINGS_DX, dvy2, 0.0);
              transformedNormal = -normalize(cross(v1, v2));
            #else
              float s = sign(transformed.x);
              float sdx1 = smoothstep(0.0, 1.0 + WINGS_DX, dx + WINGS_DX);
              float dvy1 = sin(vVel.w - sdx1) * sdx * uWingsDisplacementScale - transformed.y;
              vec3 v1 = vec3(0.0, 0.0, s);
              vec3 v2 = vec3(s * WINGS_DX, dvy1, 0.0);
              transformedNormal = -normalize(cross(v1, v2));
            #endif  
          #endif
        }

        #ifdef COMPUTE_NORMALS
          #ifdef USE_INSTANCING
            mat3 m = mat3( im );
            transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
            transformedNormal = m * transformedNormal;
          #endif
          transformedNormal = normalMatrix * transformedNormal;
          #ifdef FLIP_SIDED
            transformedNormal = - transformedNormal;
          #endif
          #ifdef USE_TANGENT
            vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
            #ifdef FLIP_SIDED
              transformedTangent = - transformedTangent;
            #endif
          #endif
          #ifndef FLAT_SHADED
            vNormal = normalize( transformedNormal );
            #ifdef USE_TANGENT
              vTangent = normalize( transformedTangent );
              vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
            #endif
          #endif
        #endif
      `),a.vertexShader=a.vertexShader.replace("#include <project_vertex>",`
        vec4 mvPosition = vec4( transformed, 1.0 );
        #ifdef USE_INSTANCING
          mvPosition = im * mvPosition;
        #endif
        mvPosition = modelViewMatrix * mvPosition;
        gl_Position = projectionMatrix * mvPosition;
      `),a.fragmentShader=`
        varying float vMapIndex;
      `+a.fragmentShader,a.fragmentShader=a.fragmentShader.replace("#include <map_fragment>",`
        #ifdef USE_MAP
          vec2 uv = vUv;
          uv.x = (vMapIndex + vUv.x) / TEXTURE_COUNT;
          vec4 sampledDiffuseColor = texture2D(map, uv);
          diffuseColor *= sampledDiffuseColor;
        #endif
      `)},e.material){case"standard":E=new ie(g);break;case"phong":E=new de(g);break;default:E=new ue(g)}S=new re(P,E,n),I(e.colors),i.add(S)}function I(i){if(Array.isArray(i)&&i.length>1){const h=$(i);for(let f=0;f<n;f++)S.setColorAt(f,h.getColorAt(f/n));S.instanceColor.needsUpdate=!0}}function A(i,h){const f=i.image.data,p=h.image.data;for(let m=0,g=f.length;m<g;m+=4)f[m+0]=j(150),f[m+1]=j(150),f[m+2]=j(150),f[m+3]=$e(.1,1),p[m+0]=j(.5),p[m+1]=j(.5),p[m+2]=j(.5),p[m+3]=0}}const{randFloat:Ke,randFloatSpread:Q}=K,Je={gpgpuSize:256,bloomStrength:1.5,bloomRadius:.5,bloomThreshold:.25,colors:[Math.random()*16777215,Math.random()*16777215,Math.random()*16777215],geometry:"custom",geometryScale:[1,1,1],lights:[{type:"ambient",params:[16777215,.5]},{type:"point",params:[16777215,1],props:{position:[0,0,0]}},{type:"point",params:[16748640,.75],props:{position:[0,-100,-100]}},{type:"point",params:[6328575,.75],props:{position:[0,100,100]}}],materialParams:{},noiseCoordScale:.01,noiseIntensity:.0025,noiseTimeCoef:4e-4,attractionRadius1:150,attractionRadius2:250,maxVelocity:.25};function Qe(l){const e={...Je,...l},t=e.gpgpuSize,n=t*t;let o,d,y,c,s;const u={value:null},r={value:null},x={value:null},w={value:new L(...e.geometryScale)},N={value:0},v={value:e.noiseCoordScale},z={value:e.noiseIntensity},R={value:e.maxVelocity},k={value:e.attractionRadius1},C={value:e.attractionRadius2},F={value:new L},U={uTexturePosition:u,uOldTexturePosition:r,uTextureVelocity:x},V={uScale:w,uTime:N,uNoiseCoordScale:v,uNoiseIntensity:z,uMaxVelocity:R,uAttractionRadius1:k,uAttractionRadius2:C,uMouse:F},_={...U,...V};let M,P,E,S,b,D,I;return{three:H({...ae(l),antialias:!1,orbitControls:!0,initRenderer({renderer:p}){A(p)},initCamera(p){S=p.camera,S.position.z=70},initScene({renderer:p,width:m,height:g,camera:a,scene:T}){i(T),P=new ke(T,a),E=new Ve(new W(m,g),e.bloomStrength,e.bloomRadius,e.bloomThreshold),M=new Re(p),M.addPass(P),M.addPass(E)},afterResize({width:p,height:m}){M&&M.setSize(p,m)},beforeRender({clock:p}){N.value=p.time*e.noiseTimeCoef,o.compute(),u.value=s.renderTargets[o.currentTextureIndex].texture,r.value=s.renderTargets[o.currentTextureIndex===0?1:0].texture,x.value=c.renderTargets[o.currentTextureIndex].texture},render(){M.render()}}),config:e,uniforms:_,setColors:h};function A(p){o=new J(t,t,p),p.capabilities.isWebGL2||o.setDataType(Z),d=o.createTexture(),y=o.createTexture(),f(d,y),c=o.addVariable("textureVelocity",`
      ${O}
      uniform float uTime;
      uniform vec3 uMouse;
      uniform float uNoiseCoordScale;
      uniform float uNoiseIntensity;
      uniform float uMaxVelocity;
      uniform float uAttractionRadius1;
      uniform float uAttractionRadius2;

      void main() {
        vec2 uv = gl_FragCoord.xy / resolution.xy;
        vec4 pos = texture2D(texturePosition, uv);
        vec4 vel = texture2D(textureVelocity, uv);

        vec3 grad;
        float n = psrdnoise(pos.xyz * uNoiseCoordScale, vec3(0), uTime, grad);
        vel.xyz += (pos.w * 0.75) * grad * uNoiseIntensity;

        vec3 dv = -pos.xyz;
        float coef = smoothstep(uAttractionRadius1, uAttractionRadius2, length(dv));
        vel.xyz = vel.xyz + pos.w * coef * normalize(dv);
        vel.xyz = clamp(vel.xyz, -uMaxVelocity, uMaxVelocity);

        gl_FragColor = vel;
      }
    `,y),s=o.addVariable("texturePosition",`
      ${O}
      uniform float uTime;
      uniform vec3 uMouse;
      void main() {
        vec2 uv = gl_FragCoord.xy / resolution.xy;
        vec4 pos = texture2D(texturePosition, uv);
        vec4 vel = texture2D(textureVelocity, uv);
        pos.xyz += vel.xyz;
        gl_FragColor = pos;
      }
    `,d),o.setVariableDependencies(c,[s,c]),o.setVariableDependencies(s,[s,c]),Object.keys(V).forEach(g=>{c.material.uniforms[g]=_[g],s.material.uniforms[g]=_[g]});const m=o.init();if(m!==null)throw new Error(m)}function i(p){switch(e.background!==void 0&&(p.background=new G(e.background)),ne(p,e.lights),e.geometry){case"box":b=new _e;break;case"capsule":b=new Ie(.2,1,4,8).rotateX(Math.PI/2);break;case"cone":b=new Ne(.4,2,6).rotateX(Math.PI/2);break;case"octahedron":b=new De(1,0).rotateX(Math.PI/2);break;case"sphere":b=new Me(.5,8,8);break;default:b=et(1)}const m=new Float32Array(n*2);let g=0;for(let a=0;a<t;a++)for(let T=0;T<t;T++)m[g++]=T/(t-1),m[g++]=a/(t-1);b.setAttribute("gpuUv",new B(m,2)),D=new ie({metalness:.75,roughness:.25,side:oe,...e.materialParams,onBeforeCompile:a=>{Object.keys(_).forEach(T=>{a.uniforms[T]=_[T]}),a.vertexShader=`
          uniform sampler2D uTexturePosition;
          uniform sampler2D uOldTexturePosition;
          uniform sampler2D uTextureVelocity;
          uniform vec3 uScale;
          attribute vec2 gpuUv;
          varying vec4 vPos;
          varying vec4 vVel;

          mat3 lookAt(vec3 origin, vec3 target, vec3 up) {
            vec3 z = target - origin;
            if (z.x * z.x + z.y * z.y + z.z * z.z == 0.0) { z.z = 1.0; }
            z = normalize(z);
            vec3 x = cross(up, z);
            if (x.x * x.x + x.y * x.y + x.z * x.z == 0.0) {
              if (abs(up.z) == 1.0) { z.x += 0.0001; }
              else { z.z += 0.0001; }
              x = cross(up, z);
            }
            x = normalize(x);
            vec3 y = cross(z, x);
            return mat3(x, y, z);
          }

          mat4 iMatrix(vec3 pos, mat3 rmat, vec3 scale) {
            return mat4(
              rmat[0][0] * scale.x, rmat[0][1] * scale.x, rmat[0][2] * scale.x, 0.0,
              rmat[1][0] * scale.y, rmat[1][1] * scale.y, rmat[1][2] * scale.y, 0.0,
              rmat[2][0] * scale.z, rmat[2][1] * scale.z, rmat[2][2] * scale.z, 0.0,
              pos.x, pos.y, pos.z, 1.0
            );
          }
        `+a.vertexShader,a.vertexShader=a.vertexShader.replace("#include <defaultnormal_vertex>",`
          vPos = texture2D(uTexturePosition, gpuUv);
          vec4 oldPos = texture2D(uOldTexturePosition, gpuUv);
          vVel = texture2D(uTextureVelocity, gpuUv);

          mat3 rmat = lookAt(oldPos.xyz, vPos.xyz, vec3(0, 1, 0));
          mat4 im = iMatrix(vPos.xyz, rmat, (0.5 + vPos.w) * uScale);

          vec3 transformedNormal = objectNormal;
          mat3 m = mat3(im);
          transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
          transformedNormal = m * transformedNormal;
          transformedNormal = normalMatrix * transformedNormal;
        `),a.vertexShader=a.vertexShader.replace("#include <project_vertex>",`
          vec4 mvPosition = modelViewMatrix * im * vec4(transformed, 1.0);
          gl_Position = projectionMatrix * mvPosition;
        `)}}),I=new re(b,D,n),h(e.colors),p.add(I)}function h(p){if(Array.isArray(p)&&p.length>1){const m=$(p);for(let g=0;g<n;g++)I.setColorAt(g,m.getColorAt(g/n));I.instanceColor.needsUpdate=!0}}function f(p,m){const g=new L,a=p.image.data,T=m.image.data;for(let q=0,pe=a.length;q<pe;q+=4)g.set(Q(1),Q(1),Q(1)).normalize().multiplyScalar(Q(e.attractionRadius1*2)),g.toArray(a,q),a[q+3]=Ke(.1,1),g.set(0,0,0),g.toArray(T,q),T[q+3]=0}}function et(l){const e=[{p:[l*.5,0,-l],n:[0,1,0]},{p:[-l*.5,0,-l],n:[0,1,0]},{p:[0,0,l],n:[0,1,0]},{p:[0,-l*.5,-l],n:[1,0,0]},{p:[0,l*.5,-l],n:[1,0,0]},{p:[0,0,l],n:[1,0,0]}],t=[0,1,2,3,4,5],n=[],o=[];for(const y of e)n.push(...y.p),o.push(...y.n);const d=new ce;return d.setAttribute("position",new me(n,3)),d.setAttribute("normal",new me(o,3)),d.setIndex(t),d}const{randFloat:tt,randFloatSpread:X}=K,ot={gpgpuSize:64,background:16777215,material:"basic",materialParams:{},texture:null,textureCount:1,colors:[16777215,16777215],lights:[{type:"ambient",params:[16777215,.5]},{type:"directional",params:[16777215,.5],props:{position:[20,50,100]}}],fogDensity:.01,fishScale:[1,1,1],fishWidthSegments:8,fishSpeed:1.5,fishDisplacementScale:.2,noiseCoordScale:.02,noiseTimeCoef:5e-4,noiseIntensity:.0025,attractionRadius1:50,attractionRadius2:100,maxVelocity:.1};function it(l){const e={...ot,...l};if(!["basic","phong","standard"].includes(e.material))throw new Error(`Invalid material ${e.material}`);if(!Number.isInteger(e.fishWidthSegments)||e.fishWidthSegments%2!==0)throw new Error(`Invalid fishWidthSegments ${e.fishWidthSegments}`);const t=e.gpgpuSize,n=t*t;let o,d,y,c,s;const u={value:null},r={value:null},x={value:null},w={value:0},N={value:e.noiseCoordScale},v={value:e.noiseIntensity},z={value:e.maxVelocity},R={value:e.attractionRadius1},k={value:e.attractionRadius2},C={value:new L(...e.fishScale)},F={value:e.fishSpeed},U={value:e.fishDisplacementScale},V={uTexturePosition:u,uOldTexturePosition:r,uTextureVelocity:x},_={uTime:w,uNoiseCoordScale:N,uNoiseIntensity:v,uMaxVelocity:z,uAttractionRadius1:R,uAttractionRadius2:k,uFishScale:C,uFishSpeed:F,uFishDisplacementScale:U},M={...V,..._};let P,E,S;return{three:H({...ae(l),antialias:!0,orbitControls:!0,initRenderer({renderer:i}){b(i)},initCamera({camera:i}){i.position.set(0,20,70)},initScene({scene:i}){D(i)},beforeRender({clock:i}){w.value=i.time*e.noiseTimeCoef,o.compute(),u.value=s.renderTargets[o.currentTextureIndex].texture,r.value=s.renderTargets[o.currentTextureIndex===0?1:0].texture,x.value=c.renderTargets[o.currentTextureIndex].texture}}),config:e,uniforms:M,setColors:I};function b(i){o=new J(t,t,i),i.capabilities.isWebGL2||o.setDataType(Z),d=o.createTexture(),y=o.createTexture(),A(d,y),c=o.addVariable("textureVelocity",`
      ${O}
      uniform float uTime;
      uniform float uNoiseCoordScale;
      uniform float uNoiseIntensity;
      uniform float uMaxVelocity;
      uniform float uAttractionRadius1;
      uniform float uAttractionRadius2;
      uniform float uFishSpeed;
      void main() {
        vec2 uv = gl_FragCoord.xy / resolution.xy;
        vec4 pos = texture2D(texturePosition, uv);
        vec4 vel = texture2D(textureVelocity, uv);

        vec3 grad;
        float n = psrdnoise(pos.xyz * uNoiseCoordScale, vec3(0), uTime, grad);
        grad = grad * uNoiseIntensity;
        vel.xyz = vel.xyz + (pos.w * 0.75) * grad;

        vec3 dv = -pos.xyz;
        float coef = smoothstep(uAttractionRadius1, uAttractionRadius2, length(dv));
        vel.xyz = vel.xyz + pos.w * coef * normalize(dv);
        vel.xyz = clamp(vel.xyz, -uMaxVelocity, uMaxVelocity);

        vel.w = mod(vel.w + length(vel.xyz) * (0.5 + pos.w) * uFishSpeed, 6.2831853071);
        gl_FragColor = vel;
      }
    `,y),s=o.addVariable("texturePosition",`
      ${O}
      uniform float uTime;
      void main() {
        vec2 uv = gl_FragCoord.xy / resolution.xy;
        vec4 pos = texture2D(texturePosition, uv);
        vec4 vel = texture2D(textureVelocity, uv);
        pos.xyz += vel.xyz;
        gl_FragColor = pos;
      }
    `,d),o.setVariableDependencies(c,[s,c]),o.setVariableDependencies(s,[s,c]),Object.keys(_).forEach(f=>{c.material.uniforms[f]=M[f],s.material.uniforms[f]=M[f]});const h=o.init();if(h!==null)throw new Error(h)}function D(i){e.background!==void 0&&(i.background=new G(e.background),e.fogDensity&&(i.fog=new Ee(e.background,e.fogDensity))),ne(i,e.lights),P=new Y(2,1,e.fishWidthSegments,1).rotateY(Math.PI/2);const h=new Float32Array(n*2),f=new Float32Array(n);let p=0,m=0;for(let a=0;a<t;a++)for(let T=0;T<t;T++)h[p++]=T/(t-1),h[p++]=a/(t-1),f[m++]=Math.floor(Math.random()*e.textureCount);P.setAttribute("gpuUv",new B(h,2)),P.setAttribute("mapIndex",new B(f,1));const g={side:oe,...e.materialParams};switch(e.texture&&(g.map=new ve().load(e.texture)),g.onBeforeCompile=a=>{a.defines={COMPUTE_NORMALS:e.material!=="basic",FISH_DZ:(2/e.fishWidthSegments).toFixed(10),TEXTURE_COUNT:e.textureCount.toFixed(10)},Object.keys(M).forEach(T=>{a.uniforms[T]=M[T]}),a.vertexShader=`
        uniform sampler2D uTexturePosition;
        uniform sampler2D uOldTexturePosition;
        uniform sampler2D uTextureVelocity;
        uniform vec3 uFishScale;
        uniform float uFishDisplacementScale;
        attribute vec2 gpuUv;
        attribute float mapIndex;
        varying vec4 vPos;
        varying vec4 vVel;
        varying float vMapIndex;

        mat3 lookAt(vec3 origin, vec3 target, vec3 up) {
          vec3 z = target - origin;
          if (z.x * z.x + z.y * z.y + z.z * z.z == 0.0) { z.z = 1.0; }
          z = normalize(z);
          vec3 x = cross(up, z);
          if (x.x * x.x + x.y * x.y + x.z * x.z == 0.0) {
            if (abs(up.z) == 1.0) { z.x += 0.0001; }
            else { z.z += 0.0001; }
            x = cross(up, z);
          }
          x = normalize(x);
          vec3 y = cross(z, x);
          return mat3(x, y, z);
        }

        mat4 iMatrix(vec3 pos, mat3 rmat, vec3 scale) {
          return mat4(
            rmat[0][0] * scale.x, rmat[0][1] * scale.x, rmat[0][2] * scale.x, 0.0,
            rmat[1][0] * scale.y, rmat[1][1] * scale.y, rmat[1][2] * scale.y, 0.0,
            rmat[2][0] * scale.z, rmat[2][1] * scale.z, rmat[2][2] * scale.z, 0.0,
            pos.x, pos.y, pos.z, 1.0
          );
        }
      `+a.vertexShader,a.vertexShader=a.vertexShader.replace("#include <defaultnormal_vertex>",""),a.vertexShader=a.vertexShader.replace("#include <normal_vertex>",""),a.vertexShader=a.vertexShader.replace("#include <begin_vertex>",`
        vPos = texture2D(uTexturePosition, gpuUv);
        vec4 oldPos = texture2D(uOldTexturePosition, gpuUv);
        vVel = texture2D(uTextureVelocity, gpuUv);
        vMapIndex = float(mapIndex);

        mat3 rmat = lookAt(oldPos.xyz, vPos.xyz, vec3(0, 1, 0));
        mat4 im = iMatrix(vPos.xyz, rmat, (0.5 + vPos.w) * uFishScale);

        vec3 transformed = vec3(position);

        #ifdef COMPUTE_NORMALS
          vec3 transformedNormal = objectNormal; 
        #endif

        float dz = transformed.z + 1.0;
        float sdz = smoothstep(2.0, 0.0, dz);
        transformed.x += sin(vVel.w + dz * PI * 1.5) * sdz * uFishDisplacementScale;

        #ifdef COMPUTE_NORMALS
          float dz1 = dz - 0.2;
          float sdz1 = smoothstep(2.0, 0.0, dz1);
          float dx1 = sin(vVel.w + dz1 * PI * 1.5) * sdz1 * uFishDisplacementScale - transformed.x;
          vec3 v1 = vec3(dx1, 0.0, -FISH_DZ);
          vec3 v2 = vec3(0.0, 1.0, 0.0);
          transformedNormal = normalize(cross(v1, v2));
        #endif

        #ifdef COMPUTE_NORMALS
          #ifdef USE_INSTANCING
            mat3 m = mat3( im );
            transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
            transformedNormal = m * transformedNormal;
          #endif
          transformedNormal = normalMatrix * transformedNormal;
          #ifdef FLIP_SIDED
            transformedNormal = - transformedNormal;
          #endif
          #ifdef USE_TANGENT
            vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
            #ifdef FLIP_SIDED
              transformedTangent = - transformedTangent;
            #endif
          #endif
          #ifndef FLAT_SHADED
            vNormal = normalize( transformedNormal );
            #ifdef USE_TANGENT
              vTangent = normalize( transformedTangent );
              vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
            #endif
          #endif
        #endif
      `),a.vertexShader=a.vertexShader.replace("#include <project_vertex>",`
        vec4 mvPosition = vec4( transformed, 1.0 );
        #ifdef USE_INSTANCING
          mvPosition = im * mvPosition;
        #endif
        mvPosition = modelViewMatrix * mvPosition;
        gl_Position = projectionMatrix * mvPosition;
      `),a.fragmentShader=`
        varying float vMapIndex;
      `+a.fragmentShader,a.fragmentShader=a.fragmentShader.replace("#include <map_fragment>",`
        #ifdef USE_MAP
          vec2 uv = vUv;
          uv.x = (vMapIndex + vUv.x) / TEXTURE_COUNT;
          vec4 sampledDiffuseColor = texture2D(map, uv);
          diffuseColor *= sampledDiffuseColor;
        #endif
      `)},e.material){case"standard":E=new ie(g);break;case"phong":E=new de(g);break;default:E=new ue(g)}S=new re(P,E,n),I(e.colors),i.add(S)}function I(i){if(Array.isArray(i)&&i.length>1){const h=$(i);for(let f=0;f<n;f++)S.setColorAt(f,h.getColorAt(f/n));S.instanceColor.needsUpdate=!0}}function A(i,h){const f=i.image.data,p=h.image.data;for(let m=0,g=f.length;m<g;m+=4)f[m+0]=X(100),f[m+1]=X(100),f[m+2]=X(100),f[m+3]=tt(.1,1),p[m+0]=X(.5),p[m+1]=X(.5),p[m+2]=X(.5),p[m+3]=0}}export{Ze as butterfliesBackground,it as fishesBackground,We as neonCursor,Be as noisyLinesBackground,Ge as particlesCursor,Qe as swarmBackground};
//# sourceMappingURL=threejs-toys.module.min.js.map
